{"version":3,"sources":["components/individual-monster-card/individual-monster-card.styles.jsx","components/monster-list-container/monster-list-container.styles.jsx","components/monster-list-container/monster-list-container.component.jsx","components/search-box/search-box.styles.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["styled","div","MonsterListContainerDiv","CardList","props","monsters","map","monster","input","SearchBox","placeholder","handleChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","name","toLowerCase","includes","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"stBAEoCA,IAAOC,IAAV,K,mPCA1B,IAAMC,EAA0BF,IAAOC,IAAV,KCYrBE,EARE,SAACC,GAAD,OACb,kBAACF,EAAD,KACCE,EAAMC,SAASC,KAAI,SAAAC,S,wNCNGP,IAAOQ,MAAV,KAAjB,ICUQC,EARG,SAAC,GAAD,EAAGC,YAAH,EAAgBC,cC0CnBC,E,kDAtCb,aAAe,IAAD,8BACV,gBAcJD,aAAe,SAACE,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAbxC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALL,E,gEASO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOhC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAAnB,GAAO,OAC9CA,EAAQoB,KAAKC,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAKE,UAAU,OACb,gDACA,kBAAC,EAAD,CAEEpB,YAAY,kBACZC,aAAca,KAAKb,eAErB,kBAAC,EAAD,CAAsBN,SAAUoB,S,GAlCtBM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b647de08.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const MonsterCardContainer = styled.div ` \n    display: flex;\n    flex-direction: column;\n    background-color: #95dada;\n    border: 1px solid grey;\n    border-radius: 5px;\n    padding:55px;\n    cursor: pointer;\n    -moz-osx-font-smoothing: grayscale;\n    backface-visibility: hidden;\n    transform: translateZ(0);\n    transition: 0.25s ease-out;\n\n    &:hover {\n        transform: scale(1.05);\n    }\n`;","import styled from \"styled-components\";\n\nexport const MonsterListContainerDiv = styled.div ` \n    width:85vw;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr; /* fit within 4 columns or 1 fraction - ie 4*/\n    grid-gap: 20px;\n`;","import React from \"react\";\n\nimport IndividualMonster from \"../individual-monster-card/individual-monster-card.component\";\n\nimport { MonsterListContainerDiv } from \"./monster-list-container.styles\";\n\nconst CardList = (props) => (\n    <MonsterListContainerDiv>\n    {props.monsters.map(monster => (     // getting the props from app.js called monsters ( the yellow ) and then mapping over each. returns an individual monster.\n        <IndividualMonster key={monster.id} monster={monster}/>  // imported the Card and pass it a key and give it a prop called monster which takes each individual monster. Key needed so react knows which monster to update if one changes\n    ))}\n    </MonsterListContainerDiv>   \n);\n\nexport default CardList;","import styled from \"styled-components\";\n\nexport const SearchInput = styled.input ` \n    -webkit-appearance: none;\n    border:1px solid black;\n    padding:10px;\n    width:150px;\n    line-height: 30px;\n    margin: 30px 0px;\n`;","import React from 'react';\n\nimport { SearchInput } from \"./search-box.styles\";\n\nconst SearchBox = ({ placeholder, handleChange }) => ( // received placeholder and handleChange from app.js in the imported searchbox component.\n    <SearchInput\n        type='search'  \n        placeholder={placeholder}  // giving the search input a placeholder and handleChange that gives the values from the searchbox in app.js.\n        onChange={handleChange}    // can have multiple search boxes in app.js using these two things.You would give each searchbox its respective code in theapp.js searxh\n    />\n);\n\nexport default SearchBox;","import React from 'react';\nimport './App.css';\n\nimport MonsterListContainer from \"./components/monster-list-container/monster-list-container.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n\n  constructor() {\n      super();\n\n      this.state = {\n        monsters: [],\n        searchField: ''\n      };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users') \n    .then(response => response.json()) \n    .then(users => this.setState({monsters: users})); \n  }\n\n  handleChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state; // destructure from the state - use the same names. Set them to constants.\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())  // create a new variable that gets the monsters state and filters over it ( which gets a new array ) and checks to see if an individual monster name contains what the searchfierld includes when typed. tolowercase in case user uses capitals.\n      )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          // giving the searchbox component itself ( the component file ) 2 props called placeholder and handleChange and giving them values or functions etc. These can then be used in the searchbox component.jsx file itself where we would destructure them.\n          placeholder='search monsters'  \n          handleChange={this.handleChange}\n        />\n        <MonsterListContainer monsters={filteredMonsters}/>   \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}